<!DOCTYPE mapper
PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="OrderMapper">

    <!-- 주문 내역 정보 생성 -->
    <insert id="insertOrder" parameterType="Order" useGeneratedKeys="true" keyProperty="orderId">
        INSERT INTO orders (
            user_id,
            merchant_uid,
            delivery_fee,
            original_total_price,
            current_total_price,
            recipient_name,
            recipient_phone,
            recipient_postcode,
            recipient_address,
            delivery_request,
            payment_method
        ) VALUES (
            #{userId},
            #{merchantUid},
            #{deliveryFee},
            #{originalTotalPrice},
            #{currentTotalPrice},
            #{recipientName},
            #{recipientPhone},
            #{recipientPostcode},
            #{recipientAddress},
            #{deliveryRequest},
            #{paymentMethod}
        )
    </insert>

    <!-- order 정보 업데이트 -->
    <update id="updateOrder" parameterType="Order">
        UPDATE 
            orders 
        SET
            merchant_uid = #{merchantUid},
            delivery_fee = #{deliveryFee},
            original_total_price = #{originalTotalPrice},
            current_total_price = #{currentTotalPrice},
            recipient_name = #{recipientName},
            recipient_phone = #{recipientPhone},
            recipient_postcode = #{recipientPostcode},
            recipient_address = #{recipientAddress},
            delivery_request = #{deliveryRequest},
            payment_method = #{paymentMethod}
        WHERE 
            order_id = #{orderId}
    </update>

    <!-- order 정보 sql 세트 -->
    <sql id="orderColumn">
        SELECT
            order_id as orderId,
            merchant_uid as merchantUid,
            user_id as userId,
            delivery_fee as deliveryFee,
            original_total_price as originalTotalPrice,
            current_total_price as currentTotalPrice,
            recipient_name as recipientName,
            recipient_phone as recipientPhone,
            recipient_postcode as recipientPostcode,
            recipient_address as recipientAddress,
            delivery_request as deliveryRequest,
            payment_method as paymentMethod,
            created_at as createdAt,
            updated_at as updatedAt
    </sql>

    <!-- 주문 마스터 정보 조회(user_id 기준) -->
    <select id="getUserOrderList" parameterType="Integer" resultType="Order">
        <include refid="orderColumn"/>
        FROM orders 
        WHERE user_id = #{userId}
    </select>

    <!-- 주문 마스터 정보 조회(order_id 기준) -->
    <select id="getOrderInfo" parameterType="Integer" resultType="Order">
        <include refid="orderColumn"/>
        FROM orders 
        WHERE order_id = #{orderId}
    </select>

    <!-- 주문 정보 조회(merchant_uid 기준) -->
    <select id="getOrderInfoByMerchantUid" parameterType="String" resultType="Order">
        <include refid="orderColumn"/>
        FROM orders 
        WHERE merchant_uid = #{merchantUid}
    </select>

    <!-- 회원 주문 내역 조회 결과 매핑 -->
    <resultMap id="OrderHistoryMap" type="com.my.gyp_portfolio_shoppingmall.dto.OrderDto$UserOrderHistoryDTO">
        <id property="orderId" column="orderId"/>
        <result property="merchantUid" column="merchantUid"/>
        <result property="userId" column="userId"/>
        <result property="email" column="email"/>
        <result property="deliveryFee" column="deliveryFee"/>
        <result property="originalTotalPrice" column="originalTotalPrice"/>
        <result property="currentTotalPrice" column="currentTotalPrice"/>
        <result property="recipientName" column="recipientName"/>
        <result property="recipientPhone" column="recipientPhone"/>
        <result property="recipientPostcode" column="recipientPostcode"/>
        <result property="recipientAddress" column="recipientAddress"/>
        <result property="deliveryRequest" column="deliveryRequest"/>
        <result property="paymentMethod" column="paymentMethod"/>
        <result property="merchantUid" column="merchantUid"/>
        <result property="createdAt" column="orderCreatedAt"/>
        <collection property="orderProductDTOList" ofType="com.my.gyp_portfolio_shoppingmall.dto.OrderDto$OrderProductDTO">
            <id property="orderProductId" column="orderProductId"/>
            <result property="productItemId" column="productItemId"/>
            <result property="productName" column="productName"/>
            <result property="originalQuantity" column="originalQuantity"/>
            <result property="changedQuantity" column="changedQuantity"/>
            <result property="requestQuantity" column="requestQuantity"/>
            <result property="price" column="price"/>
            <result property="discountRate" column="discountRate"/>
            <result property="finalPrice" column="finalPrice"/>
            <result property="size" column="size"/>
            <result property="color" column="color"/>
            <result property="status" column="status"/>
            <result property="requestReason" column="requestReason"/>
            <result property="createdAt" column="orderProductCreatedAt"/>
            <result property="version" column="orderProductVersion"/>
            <collection property="orderProductHistoryDTOList" ofType="com.my.gyp_portfolio_shoppingmall.dto.OrderDto$OrderProductHistoryDTO">
                <id property="orderProductHistoryId" column="orderProductHistoryId"/>
                <result property="requestQuantityRecord" column="requestQuantityRecord"/>
                <result property="statusFrom" column="statusFrom"/>
                <result property="statusTo" column="statusTo"/>
                <result property="reason" column="reason"/>
                <result property="createdAt" column="historyCreatedAt"/>
            </collection>
        </collection>
    </resultMap>

    <!-- 주문 내역 조회 sql 세트 -->
    <sql id="orderHistoryColumn">
        o.order_id as orderId,
        o.merchant_uid as merchantUid,
        u.user_id as userId,
        u.email as email,
        o.delivery_fee as deliveryFee,
        o.original_total_price as originalTotalPrice,
        o.current_total_price as currentTotalPrice,
        o.recipient_name as recipientName,
        o.recipient_phone as recipientPhone,
        o.recipient_postcode as recipientPostcode,
        o.recipient_address as recipientAddress,
        o.delivery_request as deliveryRequest,
        o.payment_method as paymentMethod,
        o.merchant_uid as merchantUid,
        o.created_at as orderCreatedAt,
        op.order_product_id as orderProductId,
        op.product_item_id as productItemId,
        p.name as productName,
        op.original_quantity as originalQuantity,
        op.changed_quantity as changedQuantity,
        op.request_quantity as requestQuantity,
        op.price as price,
        op.discount_rate as discountRate,
        op.final_price as finalPrice,
        op.size as size,
        op.color as color,
        op.status as status,
        op.request_reason as requestReason,
        op.created_at as orderProductCreatedAt,
        op.version as orderProductVersion,
        oph.order_product_history_id as orderProductHistoryId,
        oph.request_quantity_record as requestQuantityRecord,
        oph.status_from as statusFrom,
        oph.status_to as statusTo,
        oph.reason as reason,
        oph.created_at as historyCreatedAt
    </sql>
    
    <sql id="orderJoins">
        FROM 
            orders o
        JOIN 
            order_products op ON o.order_id = op.order_id
        LEFT JOIN 
            order_product_histories oph ON op.order_product_id = oph.order_product_id
        LEFT JOIN 
            users u ON o.user_id = u.user_id
        LEFT JOIN 
            product_items pi ON op.product_item_id = pi.product_item_id
        LEFT JOIN 
            products p ON pi.product_id = p.product_id
    </sql>

    <!-- 회원 주문 조회(user_id 기준) -->
    <select id="getUserOrderHistory" parameterType="Integer" resultMap="OrderHistoryMap" useCache="false" flushCache="true">
        SELECT
            <include refid="orderHistoryColumn"/>
            <include refid="orderJoins"/>
        WHERE 
            o.user_id = #{userId}
        ORDER BY 
            o.created_at DESC
    </select>

    <!-- 단일 주문 상세 조회(order_id 기준) -->
    <select id="getOrderDetail" parameterType="Integer" resultMap="OrderHistoryMap" useCache="false" flushCache="true">
        SELECT
            <include refid="orderHistoryColumn"/>
        <include refid="orderJoins"/>
        WHERE 
            o.order_id = #{orderId}
        ORDER BY 
            op.created_at DESC
    </select>

    <!-- 관리자용 주문 조회(검색 조건, 정렬 조건, 페이징 조건 포함) -->
    <select id="getOrderListForAdmin" parameterType="Map" resultMap="OrderHistoryMap" useCache="false" flushCache="true">
        SELECT
            <include refid="orderHistoryColumn"/>
        FROM orders o
        JOIN order_products op ON o.order_id = op.order_id
        LEFT JOIN order_product_histories oph ON op.order_product_id = oph.order_product_id
        LEFT JOIN users u ON o.user_id = u.user_id
        LEFT JOIN product_items pi ON op.product_item_id = pi.product_item_id
        LEFT JOIN products p ON pi.product_id = p.product_id
        <where>
            <if test="merchantUid != null and merchantUid != ''">
                o.merchant_uid LIKE CONCAT('%', #{merchantUid}, '%')
            </if>
            <if test="userEmail != null and userEmail != ''">
                AND u.email LIKE CONCAT('%', #{userEmail}, '%')
            </if>
            <if test="startDate != null and startDate != ''">
                AND o.created_at &gt;= #{startDate}
            </if>
            <if test="endDate != null and endDate != ''">
                AND o.created_at &lt;= #{endDate}
            </if>
        </where>
        ORDER BY o.created_at DESC, op.order_product_id
    </select>

    <!-- 주문 수 조회 -->
    <select id="getOrderCount" resultType="int">
        SELECT COUNT(*) 
        FROM orders 
    </select>

    <!-- 회원의 주문 내역이 존재하면서 구매 완료한 상품인지 확인 -->
    <select id="checkUserOrderedProduct" parameterType="com.my.gyp_portfolio_shoppingmall.dto.ReviewDto$ReviewDTO" resultType="int">
        SELECT 
            COUNT(*)
        FROM 
            orders o
        JOIN 
            order_products op ON o.order_id = op.order_id
        WHERE 
            o.user_id = #{userId}
        AND 
            op.order_product_id = #{orderProductId}
        AND 
            op.status = 'DELIVERY_CONFIRMED'
    </select>
</mapper>

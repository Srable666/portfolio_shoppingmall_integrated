<!DOCTYPE mapper
PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="PaymentHistoryMapper">
    <!-- 결제 이력 정보 생성 -->
    <insert id="insertPaymentHistory" parameterType="PaymentHistory">
        INSERT INTO payment_histories (
            imp_uid,
            merchant_uid,
            pg_tid,
            name,
            status,
            pay_method,
            pg_provider,
            emb_pg_provider,
            paid_amount,
            buyer_name,
            buyer_email,
            buyer_tel,
            buyer_addr,
            buyer_postcode,
            paid_at,
            custom_data,
            receipt_url,
            error_code,
            error_msg
        ) VALUES (
            #{impUid},
            #{merchantUid},
            #{pgTid},
            #{name},
            #{status},
            #{payMethod},
            #{pgProvider},
            #{embPgProvider},
            #{paidAmount},
            #{buyerName},
            #{buyerEmail},
            #{buyerTel},
            #{buyerAddr},
            #{buyerPostcode},
            #{paidAt},
            #{customData},
            #{receiptUrl},
            #{errorCode},
            #{errorMsg}
        )
    </insert>

    <!-- 결제 이력 정보 sql 세트 -->
    <sql id="paymentHistoryColumns">
        SELECT 
            payment_history_id as paymentHistoryId,
            imp_uid as impUid,
            merchant_uid as merchantUid,
            order_id as orderId,
            pg_tid as pgTid,
            name as name,
            status as status,
            pay_method as payMethod,
            pg_provider as pgProvider,
            emb_pg_provider as embPgProvider,
            paid_amount as paidAmount,
            buyer_name as buyerName,
            buyer_email as buyerEmail,
            buyer_tel as buyerTel,
            buyer_addr as buyerAddr,
            buyer_postcode as buyerPostcode,
            paid_at as paidAt,
            custom_data as customData,
            receipt_url as receiptUrl,
            error_code as errorCode,
            error_msg as errorMsg,
            created_at as createdAt,
            updated_at as updatedAt
        FROM payment_histories
    </sql>

    <!-- 결제 이력 업데이트 -->
    <update id="updatePaymentHistory" parameterType="PaymentHistory">
        UPDATE payment_histories
        SET
            status = #{status},
            paid_amount = #{paidAmount},
            paid_at = #{paidAt},
            custom_data = #{customData},
            receipt_url = #{receiptUrl},
            error_code = #{errorCode},
            error_msg = #{errorMsg}
        WHERE imp_uid = #{impUid}
    </update>

    <!-- 결제 이력 조회(payment_id) -->
    <select id="selectPaymentHistoryByPaymentId" parameterType="String" resultType="PaymentHistory">
        <include refid="paymentHistoryColumns" />
        WHERE imp_uid = #{impUid}
    </select>

    <!-- 결제 이력 조회(order_id) -->
    <select id="selectPaymentHistoryByOrderId" parameterType="String" resultType="PaymentHistory">
        <include refid="paymentHistoryColumns" />
        WHERE order_id = #{orderId}
        ORDER BY created_at DESC
    </select>

    <!-- 결제 이력 조회(merchant_uid) -->
    <select id="selectPaymentHistoryByMerchantUid" parameterType="String" resultType="PaymentHistory">
        <include refid="paymentHistoryColumns" />
        WHERE merchant_uid = #{merchantUid}
        ORDER BY created_at DESC
    </select>
    
    <!-- 결제 이력 검색(관리자용) -->
    <select id="searchPaymentHistory" parameterType="com.my.gyp_portfolio_shoppingmall.dto.PaymentDto$PaymentHistorySearchDTO" resultType="PaymentHistory" useCache="false" flushCache="true">
        <include refid="paymentHistoryColumns" />
        <where>
            <if test="impUid != null and impUid != ''">
                imp_uid LIKE CONCAT('%', #{impUid}, '%')
            </if>
            <if test="merchantUid != null and merchantUid != ''">
                AND merchant_uid LIKE CONCAT('%', #{merchantUid}, '%')
            </if>
            <if test="buyerEmail != null and buyerEmail != ''">
                AND buyer_email LIKE CONCAT('%', #{buyerEmail}, '%')
            </if>
            <if test="orderId != null">
                AND order_id = #{orderId}
            </if>
            <if test="status != null and status != ''">
                AND status = #{status}
            </if>
            <if test="payMethod != null and payMethod != ''">
                AND pay_method = #{payMethod}
            </if>
            <if test="startDate != null">
                AND paid_at &gt;= #{startDate}
            </if>
            <if test="endDate != null">
                AND paid_at &lt;= #{endDate}
            </if>
        </where>
        ORDER BY created_at DESC
    </select>

    <!-- 총 매출 조회 -->
    <select id="getTotalRevenue" resultType="long">
        SELECT COALESCE(SUM(paid_amount), 0)
        FROM payment_histories
        WHERE status = 'PAID'
        AND error_code IS NULL
    </select>

    <!-- 총 결제 수 조회 -->
    <select id="getPaymentCount" resultType="int">
        SELECT COUNT(*)
        FROM payment_histories
    </select>
    
    <!-- 주문 ID 업데이트 (merchant_uid 기준) -->
    <update id="updateOrderId" parameterType="PaymentHistory">
        UPDATE payment_histories 
        SET order_id = #{orderId}
        WHERE merchant_uid = #{merchantUid}
    </update>
</mapper>
